radare2 medium
WARN: run r2 with -e bin.cache=true to fix relocations in disassembly
 -- Bindiff two files with '$ radiff2 /bin/true /bin/false'
[0x00001120]> i
fd       3
file     medium
size     0x4ba0
humansz  18.9K
mode     r-x
format   elf64
iorw     false
block    0x100
type     DYN (Shared object file)
arch     x86
baddr    0x0
binsz    16991
bintype  elf
bits     64
canary   true
class    ELF64
compiler GCC: (Ubuntu 12.2.0-3ubuntu1) 12.2.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
nx       true
os       linux
pic      true
relocs   true
relro    full
rpath    NONE
sanitize false
static   false
stripped false
subsys   linux
va       true
[0x00001120]> iz
[Strings]
nth paddr      vaddr      len size section type  string
―――――――――――――――――――――――――――――――――――――――――――――――――――――――
0   0x00002018 0x00002018 87  88   .rodata ascii Your Task is to defuse the bomb.\nIf you enter wrong password the bomb will go KABOOM!!!
1   0x00002070 0x00002070 20  21   .rodata ascii Enter the password: 
2   0x00002088 0x00002088 41  42   .rodata ascii Congratulations! You've defused the bomb!
3   0x000020b2 0x000020b2 9   10   .rodata ascii KABOOM!!!
[0x00001120]> iz
[Strings]
nth paddr      vaddr      len size section type  string
―――――――――――――――――――――――――――――――――――――――――――――――――――――――
0   0x00002018 0x00002018 87  88   .rodata ascii Your Task is to defuse the bomb.\nIf you enter wrong password the bomb will go KABOOM!!!
1   0x00002070 0x00002070 20  21   .rodata ascii Enter the password: 
2   0x00002088 0x00002088 41  42   .rodata ascii Congratulations! You've defused the bomb!
3   0x000020b2 0x000020b2 9   10   .rodata ascii KABOOM!!!
[0x00001120]> iS
[Sections]

nth paddr        size vaddr       vsize perm type        name
―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
0   0x00000000    0x0 0x00000000    0x0 ---- NULL
1   0x00000318   0x1c 0x00000318   0x1c -r-- PROGBITS    .interp
2   0x00000338   0x30 0x00000338   0x30 -r-- NOTE        .note.gnu.property
3   0x00000368   0x24 0x00000368   0x24 -r-- NOTE        .note.gnu.build-id
4   0x0000038c   0x20 0x0000038c   0x20 -r-- NOTE        .note.ABI-tag
5   0x000003b0   0x28 0x000003b0   0x28 -r-- GNU_HASH    .gnu.hash
6   0x000003d8  0x150 0x000003d8  0x150 -r-- DYNSYM      .dynsym
7   0x00000528   0xd2 0x00000528   0xd2 -r-- STRTAB      .dynstr
8   0x000005fa   0x1c 0x000005fa   0x1c -r-- GNU_VERSYM  .gnu.version
9   0x00000618   0x40 0x00000618   0x40 -r-- GNU_VERNEED .gnu.version_r
10  0x00000658   0xd8 0x00000658   0xd8 -r-- RELA        .rela.dyn
11  0x00000730   0xa8 0x00000730   0xa8 -r-- RELA        .rela.plt
12  0x00001000   0x1b 0x00001000   0x1b -r-x PROGBITS    .init
13  0x00001020   0x80 0x00001020   0x80 -r-x PROGBITS    .plt
14  0x000010a0   0x10 0x000010a0   0x10 -r-x PROGBITS    .plt.got
15  0x000010b0   0x70 0x000010b0   0x70 -r-x PROGBITS    .plt.sec
16  0x00001120  0x267 0x00001120  0x267 -r-x PROGBITS    .text
17  0x00001388    0xd 0x00001388    0xd -r-x PROGBITS    .fini
18  0x00002000   0xbc 0x00002000   0xbc -r-- PROGBITS    .rodata
19  0x000020bc   0x4c 0x000020bc   0x4c -r-- PROGBITS    .eh_frame_hdr
20  0x00002108  0x10c 0x00002108  0x10c -r-- PROGBITS    .eh_frame
21  0x00002d88    0x8 0x00003d88    0x8 -rw- INIT_ARRAY  .init_array
22  0x00002d90    0x8 0x00003d90    0x8 -rw- FINI_ARRAY  .fini_array
23  0x00002d98  0x1f0 0x00003d98  0x1f0 -rw- DYNAMIC     .dynamic
24  0x00002f88   0x78 0x00003f88   0x78 -rw- PROGBITS    .got
25  0x00003000   0x10 0x00004000   0x10 -rw- PROGBITS    .data
26  0x00003010    0x0 0x00004010   0x10 -rw- NOBITS      .bss
27  0x00003010   0x25 0x00000000   0x25 ---- PROGBITS    .comment
28  0x00003035   0x30 0x00000000   0x30 ---- PROGBITS    .debug_aranges
29  0x00003065  0x3da 0x00000000  0x3da ---- PROGBITS    .debug_info
30  0x0000343f  0x16b 0x00000000  0x16b ---- PROGBITS    .debug_abbrev
31  0x000035aa   0xda 0x00000000   0xda ---- PROGBITS    .debug_line
32  0x00003684  0x2b2 0x00000000  0x2b2 ---- PROGBITS    .debug_str
33  0x00003936   0xde 0x00000000   0xde ---- PROGBITS    .debug_line_str
34  0x00003a18  0x450 0x00000000  0x450 ---- SYMTAB      .symtab
35  0x00003e68  0x28d 0x00000000  0x28d ---- STRTAB      .strtab
36  0x000040f5  0x16a 0x00000000  0x16a ---- STRTAB      .shstrtab

[0x00001120]> aa
INFO: Analyze all flags starting with sym. and entry0 (aa)
INFO: Analyze all functions arguments/locals (afva@@@F)
[0x00001120]> afl
0x00001120    1     37 entry0
0x00001150    4     34 sym.deregister_tm_clones
0x00001180    4     51 sym.register_tm_clones
0x000011c0    5     54 sym.__do_global_dtors_aux
0x000010a0    1     11 fcn.000010a0
0x00001200    1      9 sym.frame_dummy
0x00001388    1     13 sym._fini
0x00001273    1     48 sym.check_part3
0x00001110    1     11 sym.imp.strcmp
0x00001209    1     53 sym.check_part1
0x000010b0    1     11 sym.imp.strncmp
0x000012a3    8    228 main
0x00001000    3     27 sym._init
0x0000123e    1     53 sym.check_part2
0x000010c0    1     11 sym.imp.puts
0x000010d0    1     11 sym.imp.__stack_chk_fail
0x000010e0    1     11 sym.imp.printf
0x000010f0    1     11 sym.imp.strcspn
0x00001100    1     11 sym.imp.fgets
[0x00001120]> pdf @ 0x00001209
            ; CALL XREF from main @ 0x131b(x)
┌ 53: sym.check_part1 (int64_t arg1);
│           ; arg int64_t arg1 @ rdi
│           ; var int64_t var_8h @ rbp-0x8
│           0x00001209      f30f1efa       endbr64                     ; stdio.h:4
│           0x0000120d      55             push rbp
│           0x0000120e      4889e5         mov rbp, rsp
│           0x00001211      4883ec10       sub rsp, 0x10
│           0x00001215      48897df8       mov qword [var_8h], rdi     ; arg1
│           0x00001219      488b45f8       mov rax, qword [var_8h]     ; stdio.h:5    The GNU C Library is free software; you can redistribute it and/or
│           0x0000121d      ba03000000     mov edx, 3
│           0x00001222      488d0ddf0d00.  lea rcx, [0x00002008]       ; "mcs"
│           0x00001229      4889ce         mov rsi, rcx
│           0x0000122c      4889c7         mov rdi, rax
│           0x0000122f      e87cfeffff     call sym.imp.strncmp        ; int strncmp(const char *s1, const char *s2, size_t n)
│           0x00001234      85c0           test eax, eax
│           0x00001236      0f94c0         sete al
│           0x00001239      0fb6c0         movzx eax, al
│           0x0000123c      c9             leave                       ; stdio.h:6    modify it under the terms of the GNU Lesser General Public
└           0x0000123d      c3             ret
[0x00001120]> pdf @ 0x0000123e
            ; CALL XREF from main @ 0x132f(x)
┌ 53: sym.check_part2 (int64_t arg1);
│           ; arg int64_t arg1 @ rdi
│           ; var int64_t var_8h @ rbp-0x8
│           0x0000123e      f30f1efa       endbr64                     ; stdio.h:8    version 2.1 of the License, or (at your option) any later version.
│           0x00001242      55             push rbp
│           0x00001243      4889e5         mov rbp, rsp
│           0x00001246      4883ec10       sub rsp, 0x10
│           0x0000124a      48897df8       mov qword [var_8h], rdi     ; arg1
│           0x0000124e      488b45f8       mov rax, qword [var_8h]     ; stdio.h:9
│           0x00001252      ba03000000     mov edx, 3
│           0x00001257      488d0dae0d00.  lea rcx, [0x0000200c]       ; "XXX"
│           0x0000125e      4889ce         mov rsi, rcx
│           0x00001261      4889c7         mov rdi, rax
│           0x00001264      e847feffff     call sym.imp.strncmp        ; int strncmp(const char *s1, const char *s2, size_t n)
│           0x00001269      85c0           test eax, eax
│           0x0000126b      0f94c0         sete al
│           0x0000126e      0fb6c0         movzx eax, al
│           0x00001271      c9             leave                       ; stdio.h:10    The GNU C Library is distributed in the hope that it will be useful,
└           0x00001272      c3             ret
[0x00001120]> pdf @ 0x00001273
            ; CALL XREF from main @ 0x1343(x)
┌ 48: sym.check_part3 (int64_t arg1);
│           ; arg int64_t arg1 @ rdi
│           ; var int64_t var_8h @ rbp-0x8
│           0x00001273      f30f1efa       endbr64                     ; stdio.h:12    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
│           0x00001277      55             push rbp
│           0x00001278      4889e5         mov rbp, rsp
│           0x0000127b      4883ec10       sub rsp, 0x10
│           0x0000127f      48897df8       mov qword [var_8h], rdi     ; arg1
│           0x00001283      488b45f8       mov rax, qword [var_8h]     ; stdio.h:13    Lesser General Public License for more details.
│           0x00001287      488d15820d00.  lea rdx, [0x00002010]       ; "ssh"
│           0x0000128e      4889d6         mov rsi, rdx
│           0x00001291      4889c7         mov rdi, rax
│           0x00001294      e877feffff     call sym.imp.strcmp         ; int strcmp(const char *s1, const char *s2)
│           0x00001299      85c0           test eax, eax
│           0x0000129b      0f94c0         sete al
│           0x0000129e      0fb6c0         movzx eax, al
│           0x000012a1      c9             leave                       ; stdio.h:14
└           0x000012a2      c3             ret
[0x00001120]> 
